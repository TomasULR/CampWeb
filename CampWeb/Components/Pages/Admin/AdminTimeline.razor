@page "/admin/timeline"
@page "/admin/timeline/{CampId:int}"
@using System.ComponentModel.DataAnnotations
@using CampWeb.Models
@using CampWeb.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject ICampService CampService
@inject ITimelineService TimelineService
@inject IWebHostEnvironment Environment
@inject IJSRuntime JSRuntime
@inject ILogger<AdminTimeline> Logger
@attribute [Authorize(Roles = "Admin,SuperAdmin")]
@layout AdminLayout
@rendermode InteractiveServer

<div class="container-fluid py-3">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="h4 mb-0"><i class="fas fa-images me-2"></i>Timeline & Fotky</h1>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-secondary" @onclick="RefreshTimeline" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-1"></span>
                }
                Obnovit
            </button>
            <button class="btn btn-primary" @onclick="() => showQuickPost = true" disabled="@(selectedCampId == 0)">
                Nový příspěvek / fotky
            </button>
        </div>
    </div>

    <!-- Výběr tábora + filtr -->
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <div class="col-md-6">
                    <label class="form-label">Vyberte tábor</label>
                    <select class="form-select" @bind="selectedCampId" @bind:event="onchange"
                            @bind:after="LoadTimeline">
                        <option value="0">-- Vyberte tábor --</option>
                        @foreach (var camp in camps)
                        {
                            <option value="@camp.Id">@camp.Name (@camp.StartDate.ToString("dd.MM.yyyy"))</option>
                        }
                    </select>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Filtr obsahu</label>
                    <select class="form-select" @bind="contentFilter" @bind:event="onchange"
                            @bind:after="FilterContent">
                        <option value="all">Vše</option>
                        <option value="photos">Pouze fotky</option>
                        <option value="messages">Pouze zprávy</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Rychlý příspěvek -->
    @if (showQuickPost && selectedCampId > 0)
    {
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-body">
                <EditForm Model="quickPostForm" OnValidSubmit="PublishQuickPost">
                    <DataAnnotationsValidator/>
                    <div class="row g-3">
                        <div class="col-lg-8">
                            <InputText @bind-Value="quickPostForm.Title" class="form-control"
                                       placeholder="Nadpis zprávy…"/>
                            <ValidationMessage For="() => quickPostForm.Title"/>
                        </div>
                        <div class="col-12">
                            <InputTextArea @bind-Value="quickPostForm.Content"
                                           class="form-control"
                                           rows="3"
                                           placeholder="Co se děje v táboře? Zpráva pro rodiče…"/>
                            <ValidationMessage For="() => quickPostForm.Content"/>
                        </div>
                        <div class="col-12">
                            @if (quickPostForm.HasPhotos)
                            {
                                <div class="photo-preview-grid">
                                    @foreach (var ph in quickPostForm.Photos)
                                    {
                                        <div class="photo-preview-item">
                                            <span class="small">@ph.Name</span>
                                            <button type="button" class="btn btn-sm btn-link text-danger"
                                                    @onclick="() => RemovePhoto(ph)">
                                                Odebrat
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                            <div class="upload-zone mt-2">
                                <InputFile OnChange="HandlePhotosSelected" multiple accept="image/*" id="photoInput"/>
                                <label for="photoInput" class="text-muted small ms-2">
                                    Přetáhněte sem fotky nebo klikněte pro výběr
                                </label>
                            </div>
                        </div>
                        <div class="col-12 d-flex justify-content-end">
                            <button type="button" class="btn btn-light me-2" @onclick="CancelQuickPost">Zrušit</button>
                            @if (isPublishing)
                            {
                                <button class="btn btn-primary" type="button" disabled>
                                    <span class="spinner-border spinner-border-sm me-1"></span>Publikuji…
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-primary" type="submit">Publikovat</button>
                            }
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    <!-- Timeline -->
    @if (isLoading)
    {
        <div class="text-center text-muted py-5">
            <span class="spinner-border me-2"></span>Načítání časové osy…
        </div>
    }
    else if (!filteredTimelineItems.Any())
    {
        <div class="text-center text-muted py-5">
            Zatím žádný obsah.
        </div>
    }
    else
    {
        <div class="timeline">
            @foreach (var item in filteredTimelineItems.Take(displayCount))
            {
                <div class="timeline-item @(item.HasPhoto ? "timeline-photo" : "timeline-message")">
                    <div class="timeline-marker">
                        <i class="fas @(item.HasPhoto ? "fa-camera" : "fa-comment-alt")"></i>
                    </div>
                    <div class="timeline-content">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <strong class="camp-name">@item.Title</strong>
                                <div class="text-muted small">
                                    <i class="fas fa-clock me-1"></i>@item.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm")
                                </div>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-danger" title="Smazat"
                                        @onclick="() => DeleteTimelineItem(item)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>

                        <div class="mt-2">
                            @if (!string.IsNullOrWhiteSpace(item.Content))
                            {
                                <p class="mb-2">@item.Content</p>
                            }
                            @if (!string.IsNullOrWhiteSpace(item.PhotoUrl))
                            {
                                <img src="@item.PhotoUrl"
                                     alt="@item.Title"
                                     class="img-fluid rounded cursor-pointer"
                                     style="max-height:380px"
                                     @onclick="() => OpenLightbox(item.PhotoUrl, item.Title)"/>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (displayCount < filteredTimelineItems.Count)
        {
            <div class="text-center my-3">
                <button class="btn btn-outline-secondary" @onclick="LoadMoreItems">Načíst další</button>
            </div>
        }
    }

    <!-- Lightbox -->
    @if (!string.IsNullOrEmpty(lightboxPhoto))
    {
        <div class="modal fade show" style="display:block; background:rgba(0,0,0,0.6);" @onclick="CloseLightbox">
            <div class="modal-dialog modal-xl modal-dialog-centered">
                <div class="modal-content bg-transparent border-0" @onclick:stopPropagation="true">
                    <div class="modal-body text-center p-0">
                        <img src="@lightboxPhoto" alt="@lightboxCaption" class="img-fluid rounded"
                             style="max-height:80vh"/>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int? CampId { get; set; }

    private List<Camp> camps = new();
    private List<LiveUpdate> timelineItems = new();
    private List<LiveUpdate> filteredTimelineItems = new();

    private int selectedCampId = 0;
    private string contentFilter = "all";
    private bool isLoading = true;
    private bool showQuickPost = false;
    private bool isPublishing = false;
    private int displayCount = 10;

    private QuickPostModel quickPostForm = new();

    private string lightboxPhoto = "";
    private string lightboxCaption = "";
    private string? selectedCampAccessCode;

    public class QuickPostModel
    {
        [Required, MinLength(0)] public string Title { get; set; } = "";

        [Required, MinLength(0)] public string Content { get; set; } = "";

        public List<IBrowserFile> Photos { get; set; } = new();
        public bool HasPhotos => Photos?.Any() == true;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCamps();
        if (CampId.HasValue) selectedCampId = CampId.Value;
        await LoadTimeline();
    }

    private async Task LoadCamps()
    {
        isLoading = true;
        camps = (await CampService.GetAllCampsAsync())?.OrderByDescending(c => c.StartDate).ToList() ?? new();
        isLoading = false;
    }
    private async Task TryToast(string title, string message, string type = "info")
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("showToast", title, message, type);
        }
        catch
        {
            // fallback: nic – nechceme shodit UI, když JS není k dispozici
        }
    }
    private async Task LoadTimeline()
    {
        if (selectedCampId == 0)
        {
            timelineItems = new();
            filteredTimelineItems = new();
            StateHasChanged();
            return;
        }

        isLoading = true;
        try
        {
            // najdi zvolený tábor a vezmi z něj AccessCode
            var camp = camps.FirstOrDefault(c => c.Id == selectedCampId);
            selectedCampAccessCode = await CampService.EnsureCampAccessCodeAsync(selectedCampId);

            if (string.IsNullOrWhiteSpace(selectedCampAccessCode))
            {
                // není k dispozici kód -> prázdný výsledek + nenásilná hláška
                timelineItems = new();
            }
            else
            {
                // !!! ZMĚNA: používáme metodu podle access kódu
                var list = await TimelineService.GetUpdatesByAccessCodeAsync(selectedCampAccessCode);
                timelineItems = (list ?? Enumerable.Empty<LiveUpdate>())
                    .OrderByDescending(u => u.CreatedAt)
                    .ToList();
            }

            FilterContent();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterContent()
    {
        filteredTimelineItems = contentFilter switch
        {
            "photos" => timelineItems.Where(t => !string.IsNullOrWhiteSpace(t.PhotoUrl)).ToList(),
            "messages" => timelineItems.Where(t => string.IsNullOrWhiteSpace(t.PhotoUrl)).ToList(),
            _ => timelineItems
        };
        displayCount = Math.Min(10, filteredTimelineItems.Count);
        StateHasChanged();
    }

    private void LoadMoreItems() => displayCount = Math.Min(displayCount + 10, filteredTimelineItems.Count);

    private void CancelQuickPost()
    {
        showQuickPost = false;
        quickPostForm = new();
    }

    private async Task PublishQuickPost()
    {
        if (selectedCampId == 0)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Chyba", "Vyberte prosím tábor", "error");
            return;
        }

        try
        {
            isPublishing = true;

// 1) Uložit 1. fotku jako náhled příspěvku (pokud je)
            string? coverUrl = null;
            if (quickPostForm.HasPhotos)
            {
                coverUrl = await SavePhotoAsync(quickPostForm.Photos.First());
            }

// 2) Vytvořit záznam v timeline
            var update = new LiveUpdate
            {
                CampId = selectedCampId,
                Title = quickPostForm.Title,
                Content = quickPostForm.Content,
                PhotoUrl = coverUrl,
                CreatedAt = DateTime.UtcNow
            };

            var created = await TimelineService.CreateUpdateAsync(update);

// 3) (Volitelné) Uložit všechny fotky do galerie (DB) – pokud je k dispozici API
            if (quickPostForm.HasPhotos)
            {
                foreach (var file in quickPostForm.Photos)
                {
                    var relative = await SavePhotoAsync(file);
                    if (!string.IsNullOrWhiteSpace(relative))
                    {
// Registrace fotky v galerii k táboru (pokud metoda existuje)
                        await TimelineService.UploadPhotoAsync(selectedCampId, relative, quickPostForm.Title);
                    }
                }
            }

            if (created != null)
            {
                await LoadTimeline();
                await TryToast("Úspěch", "Příspěvek byl publikován", "success");
                showQuickPost = false;
                quickPostForm = new();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Chyba", "Nepodařilo se publikovat příspěvek", "error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error publishing post");
            await JSRuntime.InvokeVoidAsync("showToast", "Chyba", "Nepodařilo se publikovat příspěvek", "error");
        }
        finally
        {
            isPublishing = false;
        }
    }

    private async Task<string?> SavePhotoAsync(IBrowserFile file)
    {
        try
        {
            var uploadsPath = Path.Combine(Environment.WebRootPath, "uploads", "camps", selectedCampId.ToString());
            Directory.CreateDirectory(uploadsPath);

            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var physicalPath = Path.Combine(uploadsPath, fileName);

            await using var stream = file.OpenReadStream(maxAllowedSize: 20 * 1024 * 1024); // 20 MB
            await using var fs = File.Create(physicalPath);
            await stream.CopyToAsync(fs);

// relativní URL slouží pro <img src>
            var relativePath = $"/uploads/camps/{selectedCampId}/{fileName}";
            return relativePath;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving photo");
            return null;
        }
    }

    private Task HandlePhotosSelected(InputFileChangeEventArgs e)
    {
        quickPostForm.Photos = e.GetMultipleFiles(50).ToList();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void RemovePhoto(IBrowserFile file)
    {
        quickPostForm.Photos.Remove(file);
    }

    private async Task RefreshTimeline()
    {
        await LoadTimeline();
        await JSRuntime.InvokeVoidAsync("showToast", "Info", "Timeline byla obnovena", "info");
    }

    private async Task DeleteTimelineItem(LiveUpdate item)
    {
        try
        {
            await TimelineService.DeleteUpdateAsync(item.Id);
            timelineItems.Remove(item);
            FilterContent();
            await JSRuntime.InvokeVoidAsync("showToast", "Hotovo", "Příspěvek smazán", "success");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting item");
            await JSRuntime.InvokeVoidAsync("showToast", "Chyba", "Smazání selhalo", "error");
        }
    }

    private void OpenLightbox(string url, string caption)
    {
        lightboxPhoto = url;
        lightboxCaption = caption;
    }

    private void CloseLightbox()
    {
        lightboxPhoto = "";
        lightboxCaption = "";
    }

}

<style>
    .timeline {
        position: relative;
        padding-left: 80px;
    }

    .timeline::before {
        content: "";
        position: absolute;
        top: 0;
        bottom: 0;
        left: 40px;
        width: 2px;
        background: #e9ecef;
    }

    .timeline-item {
        position: relative;
        margin-bottom: 24px;
    }

    .timeline-marker {
        position: absolute;
        left: 29px;
        top: 6px;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        background: #0d6efd;
        color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
    }

    .timeline-content {
        background: #fff;
        border: 1px solid #dee2e6;
        border-radius: 16px;
        padding: 16px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, .06);
    }

    .upload-zone {
        min-height: 64px;
        border: 2px dashed #dee2e6;
        border-radius: 12px;
        padding: 12px;
    }

    .upload-zone:hover {
        border-color: #0d6efd;
        background-color: #f8f9ff;
    }

    .photo-preview-grid {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .photo-preview-item {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 8px 10px;
        display: inline-flex;
        align-items: center;
        gap: 10px;
    }

    .cursor-pointer {
        cursor: pointer;
    }

    @@media (max-width: 768px) {
        .timeline {
            padding-left: 60px;
        }

        .timeline::before {
            left: 28px;
        }

        .timeline-marker {
            left: 17px;
        }
    }
</style>
