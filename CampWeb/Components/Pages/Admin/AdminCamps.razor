@page "/admin/camps"
@using CampWeb.Models
@inject ICampService CampService
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Admin,SuperAdmin")]
@layout AdminLayout
@rendermode InteractiveServer

<h1 class="h4 mb-3"><i class="fas fa-campground me-2"></i>Tábory</h1>
<div class="row g-2 mb-3">
  <div class="col-md-4">
    <input class="form-control" placeholder="Hledat název/místo…" @bind="search" @bind:event="oninput"/>
  </div>
  <div class="col-md-8 text-end">
    <button class="btn btn-outline-secondary me-2" @onclick="@Reload" disabled="@loading">
      @if (loading)
      {
        <span class="spinner-border spinner-border-sm me-1"></span>
      }
      Obnovit
    </button>
    <button class="btn btn-outline-secondary me-2" title="Vygenerovat kód všem bez kódu"
            @onclick="@GenerateCodesForAllWithout">
      Vygenerovat kódy (chybějící)
    </button>
    <button class="btn btn-outline-secondary me-2" title="Přepočítat volná místa u všech" @onclick="@RecalcAllSpots">
      Přepočítat místa (vše)
    </button>
    <button class="btn btn-primary" @onclick="@NewCamp">Nový tábor</button>
  </div>
</div>

@if (loading)
{
  <div class="text-muted py-5"><span class="spinner-border me-2"></span>Načítám…</div>
}
else if (!Filtered.Any())
{
  <div class="text-muted py-5 text-center">Žádné tábory</div>
}
@if (editing != null)
{
  <EditForm Model="editor" OnValidSubmit="SaveEditor">
    <DataAnnotationsValidator/>
    <div class="card border-0 shadow-sm mb-3">
      <div class="card-header bg-white d-flex justify-content-between align-items-center">
        <strong>Upravit tábor</strong>
        <button type="button" class="btn btn-sm btn-light" @onclick="CancelEditor" disabled="@busy">Zavřít</button>
      </div>

      <div class="card-body">
        <div class="row g-3">
          <div class="col-md-6">
            <label class="form-label">Název</label>
            <InputText class="form-control" @bind-Value="editor.Name"/>
          </div>
          <div class="col-md-6">
            <label class="form-label">Místo</label>
            <InputText class="form-control" @bind-Value="editor.Location"/>
          </div>

          <div class="col-md-3">
            <label class="form-label">Typ</label>
            <InputText class="form-control" @bind-Value="editor.Type"/>
          </div>
          <div class="col-md-3">
            <label class="form-label">Věková skupina</label>
            <InputText class="form-control" @bind-Value="editor.AgeGroup"/>
          </div>

          <div class="col-md-3">
            <label class="form-label">Cena</label>
            <InputNumber class="form-control" @bind-Value="editor.Price"/>
          </div>
          <div class="col-md-3">
            <label class="form-label">Kapacita</label>
            <InputNumber class="form-control" @bind-Value="editor.Capacity"/>
          </div>

          <div class="col-md-3">
            <label class="form-label">Začátek</label>
            <InputDate class="form-control" @bind-Value="editor.StartDate"/>
          </div>
          <div class="col-md-3">
            <label class="form-label">Konec</label>
            <InputDate class="form-control" @bind-Value="editor.EndDate"/>
          </div>

          <div class="col-md-3">
            <label class="form-label">Lat</label>
            <InputNumber class="form-control" @bind-Value="editor.Latitude"/>
          </div>
          <div class="col-md-3">
            <label class="form-label">Lng</label>
            <InputNumber class="form-control" @bind-Value="editor.Longitude"/>
          </div>

          <div class="col-md-6">
            <label class="form-label">Krátký popis</label>
            <InputTextArea class="form-control" @bind-Value="editor.ShortDescription" rows="2"/>
          </div>
          <div class="col-md-6">
            <label class="form-label">Popis</label>
            <InputTextArea class="form-control" @bind-Value="editor.Description" rows="4"/>
          </div>

          <div class="col-md-6">
            <label class="form-label d-flex align-items-center justify-content-between">
              <span>Kód pro sdílení</span>
              @if (string.IsNullOrWhiteSpace(editor.AccessCode))
              {
                <button class="btn btn-sm btn-outline-secondary" type="button"
                        @onclick="GenerateCodeCurrent" disabled="@busy">Vygenerovat
                </button>
              }
            </label>
            <input class="form-control" value="@editor.AccessCode" readonly/>
          </div>

          <div class="col-md-6">
            <label class="form-label d-flex align-items-center justify-content-between">
              <span>Duplikovat jako nový termín</span>
              <button class="btn btn-sm btn-outline-secondary" type="button"
                      @onclick="DuplicateFromEditor" disabled="@busy || duplicateStart is null || duplicateEnd is null">
                Duplikovat
              </button>
            </label>
            <div class="d-flex gap-2">
              <InputDate class="form-control" @bind-Value="duplicateStart"/>
              <InputDate class="form-control" @bind-Value="duplicateEnd"/>
            </div>
          </div>
        </div>
      </div>

      <div class="card-footer bg-white d-flex justify-content-between">
        <div>
          <button class="btn btn-outline-secondary" type="button" @onclick="RecalcSpotsCurrent" disabled="@busy">
            Přepočítat volná místa
          </button>
        </div>
        <div>
          <button class="btn btn-light me-2" type="button" @onclick="CancelEditor" disabled="@busy">Zrušit</button>
          <button class="btn btn-primary" type="submit" disabled="@busy">
            @if (busy)
            {
              <span class="spinner-border spinner-border-sm me-2"></span>
            }
            Uložit změny
          </button>
        </div>
      </div>
    </div>
  </EditForm>
}

else
{
  <div class="table-responsive">
    <table class="table table-hover align-middle">
      <thead>
      <tr>
        <th>
          <button class="btn btn-link p-0 text-decoration-none" @onclick="@(() => SortBy(nameof(Camp.Name)))">
            Název @SortGlyph(nameof(Camp.Name))
          </button>
        </th>
        <th>
          <button class="btn btn-link p-0 text-decoration-none" @onclick="@(() => SortBy(nameof(Camp.Location)))">
            Místo @SortGlyph(nameof(Camp.Location))
          </button>
        </th>
        <th>
          <button class="btn btn-link p-0 text-decoration-none" @onclick="@(() => SortBy(nameof(Camp.StartDate)))">
            Termín @SortGlyph(nameof(Camp.StartDate))
          </button>
        </th>
        <th class="text-end">
          <button class="btn btn-link p-0 text-decoration-none" @onclick="@(() => SortBy(nameof(Camp.Price)))">
            Cena @SortGlyph(nameof(Camp.Price))
          </button>
        </th>
        <th class="text-end">
          <button class="btn btn-link p-0 text-decoration-none" @onclick="@(() => SortBy(nameof(Camp.Capacity)))">
            Kapacita @SortGlyph(nameof(Camp.Capacity))
          </button>
        </th>
        <th class="text-end">Reg.</th>
        <th style="min-width:160px">Obsazenost</th>
        <!-- NOVÝ sloupec s přístupovým kódem -->
        <th style="min-width:140px">Kód</th>
        <th class="text-end">Tržby (odhad)</th>
        <th style="width:260px">Akce</th>
      </tr>
      </thead>

      <tbody>
      @foreach (var c in FilteredSorted)
      {
        var occ = Occupancy(c);
        <tr>
          <td class="text-truncate" style="max-width:280px" title="@c.Name">@c.Name</td>
          <td class="text-truncate" style="max-width:200px" title="@c.Location">@c.Location</td>
          <td>@c.StartDate.ToString("dd.MM.yyyy") – @c.EndDate.ToString("dd.MM.yyyy")</td>

          <!-- Cena (inline edit) -->
          <td class="text-end">
            @if (editId == c.Id)
            {
              <InputNumber @bind-Value="editPrice" class="form-control form-control-sm text-end"/>
            }
            else
            {
              @FormatCZK(c.Price)
            }
          </td>

          <!-- Kapacita (inline edit) -->
          <td class="text-end">
            @if (editId == c.Id)
            {
              <InputNumber @bind-Value="editCapacity" class="form-control form-control-sm text-end"/>
            }
            else
            {
              @c.Capacity
            }
          </td>

          <td class="text-end">@c.RegisteredCount</td>

          <!-- Obsazenost -->
          <td style="min-width:160px">
            <div class="progress" role="progressbar" aria-valuenow="@(occ * 100)">
              <div class="progress-bar" style="width:@($"{occ * 100:F0}%")"></div>
            </div>
          </td>

          <!-- NOVÝ: KÓD -->
          <td>
            @if (string.IsNullOrWhiteSpace(c.AccessCode))
            {
              <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => EnsureCampCode(c.Id))">Vygenerovat
              </button>
            }
            else
            {
              <span class="badge bg-light text-dark" title="Přístupový kód">@c.AccessCode</span>
            }
          </td>

          <!-- Tržby -->
          <td class="text-end">@FormatCZK(RevenueEstimate(c))</td>

          <!-- Akce -->
          <td class="text-end">
            @if (editId == c.Id)
            {
              <button class="btn btn-sm btn-primary me-1" @onclick="@(() => SaveRow(c))">Uložit</button>
              <button class="btn btn-sm btn-light me-2" @onclick="@CancelEdit">Zrušit</button>
            }
            else
            {
              <button class="btn btn-sm btn-outline-primary me-1" title="Upravit" @onclick="@(() => EditRow(c))">
                <i class="fas fa-pen"></i>
              </button>
              <button class="btn btn-sm btn-outline-danger me-2" title="Smazat" @onclick="@(() => DeleteCamp(c.Id))">
                <i class="fas fa-trash"></i>
              </button>
            }
            <button class="btn btn-sm btn-outline-secondary me-1" title="Detail"
                    @onclick="@(() => StartEdit(c))">
              Detail
            </button>

            <!-- NOVÉ akce v řádku (bez dropdownu, ať není potřeba JS) -->
            <button class="btn btn-sm btn-outline-secondary me-1" title="Duplikovat"
                    @onclick="@(() => DuplicateCamp(c.Id))">
              <i class="fas fa-copy"></i>
            </button>

            <button class="btn btn-sm btn-outline-secondary me-1" title="Přepočítat volná místa"
                    @onclick="@(() => RecalcSpots(c.Id))">
              <i class="fas fa-rotate"></i>
            </button>

            @if (!string.IsNullOrWhiteSpace(c.AccessCode))
            {
              <a class="btn btn-sm btn-outline-secondary" target="_blank"
                 title="Otevřít veřejnou galerii"
                 href="@($"/fotky/{c.AccessCode}")">
                <i class="fas fa-link"></i>
              </a>
            }
          </td>
        </tr>
      }
      </tbody>

    </table>
  </div>
}

@code {
  private bool loading = true;
  private List<Camp> all = new();
  private string search = "";
  private string sortBy = nameof(Camp.StartDate);
  private bool sortAsc = true;

  // inline edit
  private int editId = 0;
  private int editCapacity;
  private decimal editPrice;
  private Camp? editing;
  private Camp editor = new();
  private bool busy = false;
  private DateTime? duplicateStart, duplicateEnd;
  protected override async Task OnInitializedAsync() => await Reload();

  private void StartEdit(Camp c)
  {
    editing = c;
    // deep-copy do editoru, ať při Cancel nic nepromícháš
    editor = new Camp
    {
      Id = c.Id,
      Name = c.Name,
      Location = c.Location,
      Type = c.Type,
      Price = c.Price,
      Capacity = c.Capacity,
      AvailableSpots = c.AvailableSpots,
      AgeGroup = c.AgeGroup,
      ShortDescription = c.ShortDescription,
      Description = c.Description,
      Latitude = c.Latitude,
      Longitude = c.Longitude,
      StartDate = c.StartDate,
      EndDate = c.EndDate,
      AccessCode = c.AccessCode
    };
    duplicateStart = null;
    duplicateEnd = null;
  }

  private void CancelEditor()
  {
    editing = null;
  }

  private async Task SaveEditor()
  {
    if (editing is null) return;
    if (busy) return;
    busy = true;
    try
    {
      var updated = await CampService.UpdateAsync(editor);
      if (updated != null)
      {
        // promítni změny do položky v tabulce
        editing.Name = updated.Name;
        editing.Location = updated.Location;
        editing.Type = updated.Type;
        editing.Price = updated.Price;
        editing.Capacity = updated.Capacity;
        editing.AvailableSpots = updated.AvailableSpots;
        editing.AgeGroup = updated.AgeGroup;
        editing.ShortDescription = updated.ShortDescription;
        editing.Description = updated.Description;
        editing.Latitude = updated.Latitude;
        editing.Longitude = updated.Longitude;
        editing.StartDate = updated.StartDate;
        editing.EndDate = updated.EndDate;
        editing.AccessCode = updated.AccessCode;
      }

      editing = null;
    }
    finally
    {
      busy = false;
    }
  }

  private async Task GenerateCodeCurrent()
  {
    if (editing is null || busy) return;
    busy = true;
    try
    {
      var code = await CampService.EnsureCampAccessCodeAsync(editor.Id);
      editor.AccessCode = code;
      // promítni i do řádku
      var row = all.FirstOrDefault(x => x.Id == editor.Id);
      if (row != null) row.AccessCode = code;
    }
    finally
    {
      busy = false;
    }
  }

  private async Task DuplicateFromEditor()
  {
    if (editing is null || busy) return;
    if (duplicateStart is null || duplicateEnd is null) return;
    busy = true;
    try
    {
      var copy = await CampService.DuplicateAsync(editing.Id, duplicateStart, duplicateEnd);
      if (copy != null) all.Insert(0, copy);
    }
    finally
    {
      busy = false;
    }
  }

  private async Task RecalcSpotsCurrent()
  {
    if (editing is null || busy) return;
    busy = true;
    try
    {
      await CampService.RecalculateAvailableSpotsAsync(editing.Id);
      // refetch jen tuto položku (volitelné)
      var fresh = await CampService.GetCampByIdAsync(editing.Id);
      if (fresh != null)
      {
        editor.AvailableSpots = fresh.AvailableSpots;
        var row = all.FirstOrDefault(x => x.Id == editing.Id);
        if (row != null) row.AvailableSpots = fresh.AvailableSpots;
      }
    }
    finally
    {
      busy = false;
    }
  }

  private async Task Reload()
  {
    loading = true;
    StateHasChanged();
    all = (await CampService.GetAllCampsAsync())?.ToList() ?? new();
    loading = false;
  }

  private async Task GenerateCodesForAllWithout()
  {
    foreach (var c in all.Where(x => string.IsNullOrWhiteSpace(x.AccessCode)))
    {
      c.AccessCode = await CampService.EnsureCampAccessCodeAsync(c.Id);
    }
  }

  private async Task RecalcAllSpots()
  {
    foreach (var c in all)
      await CampService.RecalculateAvailableSpotsAsync(c.Id);

    // pokud chceš mít lokálně jistotu:
    all = (await CampService.GetAllCampsAsync())?.ToList() ?? all;
  }

  private IEnumerable<Camp> Filtered
  {
    get
    {
      if (string.IsNullOrWhiteSpace(search)) return all;
      var s = search.Trim().ToLowerInvariant();
      return all.Where(c => (c.Name ?? "").ToLowerInvariant().Contains(s)
                            || (c.Location ?? "").ToLowerInvariant().Contains(s));
    }
  }

  private IEnumerable<Camp> FilteredSorted
  {
    get
    {
      IEnumerable<Camp> q = Filtered;
      q = sortBy switch
      {
        nameof(Camp.Name) => (sortAsc ? q.OrderBy(c => c.Name) : q.OrderByDescending(c => c.Name)),
        nameof(Camp.Location) => (sortAsc ? q.OrderBy(c => c.Location) : q.OrderByDescending(c => c.Location)),
        nameof(Camp.StartDate) => (sortAsc ? q.OrderBy(c => c.StartDate) : q.OrderByDescending(c => c.StartDate)),
        nameof(Camp.Capacity) => (sortAsc ? q.OrderBy(c => c.Capacity) : q.OrderByDescending(c => c.Capacity)),
        nameof(Camp.Price) => (sortAsc ? q.OrderBy(c => c.Price) : q.OrderByDescending(c => c.Price)),
        _ => q
      };
      return q.ToList();
    }
  }

  private void SortBy(string key)
  {
    if (sortBy == key) sortAsc = !sortAsc;
    else
    {
      sortBy = key;
      sortAsc = true;
    }
  }

  private MarkupString SortGlyph(string key)
    => (sortBy == key) ? (MarkupString)(sortAsc ? " &#9650;" : " &#9660;") : (MarkupString)string.Empty;

  private static double Occupancy(Camp c)
    => c.Capacity > 0 ? (double)c.RegisteredCount / c.Capacity : 0;

  private static decimal RevenueEstimate(Camp c)
    => c.Price * (c.Registrations?.Count(r => r.Status == RegistrationStatus.Paid) ?? 0);

  private static string FormatCZK(decimal v)
    => string.Format(System.Globalization.CultureInfo.GetCultureInfo("cs-CZ"), "{0:C0}", v);

  private void EditRow(Camp c)
  {
    editId = c.Id;
    editCapacity = c.Capacity;
    editPrice = c.Price;
  }

  private void CancelEdit() => editId = 0;

  private async Task SaveRow(Camp c)
  {
    // uložíme jen, co se editovalo (kapacita + cena); můžeš ponechat i celé UpdateAsync(c)
    c.Capacity = editCapacity;
    c.Price = editPrice;

    var updated = await CampService.UpdateAsync(c); // ✅ nová metoda
    if (updated != null)
    {
      // Volitelně přepočet volných míst
      await CampService.RecalculateAvailableSpotsAsync(c.Id);
      // lokální kolekci už máš aktualizovanou přes referenci c
    }

    editId = 0;
  }

  private void NewCamp()
  {
    var n = new Camp
    {
      Name = "Nový tábor",
      Location = "—",
      StartDate = DateTime.Today,
      EndDate = DateTime.Today.AddDays(7),
      Capacity = 30,
      Price = 0,
      AgeGroup = "",
      Type = ""
    };
    all.Insert(0, n);
    editId = n.Id;
    editCapacity = n.Capacity;
    editPrice = n.Price;
  }

  private async Task DeleteCamp(int id)
  {
    if (await CampService.DeleteAsync(id))
      all = all.Where(x => x.Id != id).ToList();
  }

  private async Task DuplicateCamp(int id)
  {
    var copy = await CampService.DuplicateAsync(id);
    if (copy != null) all.Insert(0, copy);
  }

  private async Task RecalcSpots(int id)
  {
    await CampService.RecalculateAvailableSpotsAsync(id);
    var c = all.FirstOrDefault(x => x.Id == id);
    // případně refetch konkrétního campu, pokud chceš jistotu:
    if (c != null)
    {
      var fresh = await CampService.GetCampByIdAsync(id);
      if (fresh != null)
      {
        c.AvailableSpots = fresh.AvailableSpots;
        StateHasChanged();
      }
    }
  }

  private async Task EnsureCampCode(int id)
  {
    var code = await CampService.EnsureCampAccessCodeAsync(id);
    var c = all.FirstOrDefault(x => x.Id == id);
    if (c != null) c.AccessCode = code;
  }

}
