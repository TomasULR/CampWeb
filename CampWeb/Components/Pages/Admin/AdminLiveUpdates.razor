@page "/admin/updates"
@page "/admin/updates/{action?}"
@page "/admin/updates/{action}/{id:int}"
@using CampWeb.Models
@using CampWeb.Services
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject ICampService CampService
@inject NavigationManager Navigation  
@inject IJSRuntime JSRuntime
@inject ILogger<AdminLiveUpdates> Logger
@attribute [Authorize(Roles = "Admin,SuperAdmin")]
@layout AdminLayout
@rendermode InteractiveServer


<PageTitle>Živé zprávy - Admin Panel</PageTitle>

<CascadingValue Value="@("Živé zprávy")" Name="BreadcrumbTitle">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0">Živé zprávy</h1>
                    <p class="text-muted">Vytvářejte a spravujte zprávy pro rodiče</p>
                </div>
                <div>
                    @if (string.IsNullOrEmpty(Action) || Action == "list")
                    {
                        <a href="/admin/updates/create" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>
                            Nová zpráva
                        </a>
                    }
                    else
                    {
                        <a href="/admin/updates" class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left me-2"></i>
                            Zpět na seznam
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (string.IsNullOrEmpty(Action) || Action == "list")
    {
        <!-- Filters and Statistics -->
        <div class="row mb-4">
            <div class="col-lg-8 mb-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <label class="form-label">Filtrovat podle tábora</label>
                                <select class="form-select" @bind="selectedCampId" @bind:event="onchange" @bind:after="FilterUpdates">
                                    <option value="">Všechny tábory</option>
                                    @foreach (var camp in camps)
                                    {
                                        <option value="@camp.Id">@camp.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Hledat</label>
                                <input type="text" class="form-control" placeholder="Titulek, obsah..." 
                                       @bind="searchTerm" @bind:event="oninput" @bind:after="FilterUpdates" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 mb-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="fas fa-bullhorn text-primary fs-1 mb-2"></i>
                        <h4 class="mb-0">@filteredUpdates.Count</h4>
                        <div class="text-muted">
                            @(string.IsNullOrEmpty(selectedCampId) ? "zpráv celkem" : "zpráv z tábora")
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Updates List -->
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white">
                <h5 class="card-title mb-0">Seznam zpráv (@filteredUpdates.Count)</h5>
            </div>
            <div class="card-body p-0">
                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Načítání...</span>
                        </div>
                        <p class="mt-2 text-muted">Načítání zpráv...</p>
                    </div>
                }
                else if (!filteredUpdates.Any())
                {
                    <div class="text-center py-5">
                        <i class="fas fa-bullhorn text-muted display-1 mb-3"></i>
                        <h5 class="text-muted">Žádné zprávy</h5>
                        <p class="text-muted">
                            @if (allUpdates.Any())
                            {
                                @:Žádná zpráva neodpovídá vašemu vyhledávání.
                            }
                            else
                            {
                                @:Zatím nebyly vytvořeny žádné zprávy.
                            }
                        </p>
                        <a href="/admin/updates/create" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>
                            Vytvořit první zprávu
                        </a>
                    </div>
                }
                else
                {
                    <div class="list-group list-group-flush">
                        @foreach (var update in filteredUpdates.OrderByDescending(u => u.CreatedAt))
                        {
                            <div class="list-group-item">
                                <div class="row align-items-center">
                                    <div class="col-md-8">
                                        <div class="d-flex align-items-start">
                                            @if (!string.IsNullOrEmpty(update.PhotoUrl))
                                            {
                                                <img src="@update.PhotoUrl" alt="@update.Title" 
                                                     class="rounded me-3" style="width: 60px; height: 60px; object-fit: cover;" />
                                            }
                                            else
                                            {
                                                <div class="bg-light rounded me-3 d-flex align-items-center justify-content-center" 
                                                     style="width: 60px; height: 60px;">
                                                    <i class="fas fa-file-text text-muted"></i>
                                                </div>
                                            }
                                            <div class="flex-grow-1">
                                                <h6 class="mb-1">@update.Title</h6>
                                                <p class="text-muted mb-2 small">
                                                    @(update.Content.Length > 100 ? update.Content.Substring(0, 100) + "..." : update.Content)
                                                </p>
                                                <div class="d-flex align-items-center gap-3">
                                                    <small class="text-muted">
                                                        <i class="fas fa-campground me-1"></i>
                                                        @GetCampName(update.CampId)
                                                    </small>
                                                    <small class="text-muted">
                                                        <i class="fas fa-calendar me-1"></i>
                                                        @update.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4 text-end">
                                        <div class="btn-group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewUpdate(update)">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditUpdate(update.Id)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteUpdate(update)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
    else if (Action == "create" || Action == "edit")
    {
        <!-- Create/Edit Form -->
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white">
                        <h5 class="card-title mb-0">
                            @if (Action == "create")
                            {
                                <i class="fas fa-plus me-2 text-success"></i>@:Vytvořit novou zprávu
                            }
                            else
                            {
                                <i class="fas fa-edit me-2 text-primary"></i>@:Upravit zprávu
                            }
                        </h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="updateForm" OnValidSubmit="SaveUpdate">
                            <DataAnnotationsValidator />
                            
                            <div class="row">
                                <div class="col-md-8 mb-3">
                                    <label class="form-label">Titulek *</label>
                                    <InputText @bind-Value="updateForm.Title" class="form-control" 
                                               placeholder="Zadejte výstižný titulek zprávy" />
                                    <ValidationMessage For="@(() => updateForm.Title)" class="text-danger small" />
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label class="form-label">Tábor *</label>
                                    <InputSelect @bind-Value="updateForm.CampId" class="form-select">
                                        <option value="">Vyberte tábor</option>
                                        @foreach (var camp in camps.Where(c => c.StartDate >= DateTime.Now.AddDays(-30)))
                                        {
                                            <option value="@camp.Id">@camp.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => updateForm.CampId)" class="text-danger small" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Obsah zprávy *</label>
                                <InputTextArea @bind-Value="updateForm.Content" class="form-control" rows="6" 
                                               placeholder="Napište zprávu pro rodiče o dění v táboře..." />
                                <div class="form-text">Popisujte aktivity, zážitky nebo důležité informace pro rodiče</div>
                                <ValidationMessage For="@(() => updateForm.Content)" class="text-danger small" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">URL fotky (volitelné)</label>
                                <InputText @bind-Value="updateForm.PhotoUrl" class="form-control" 
                                           placeholder="https://example.com/photo.jpg" />
                                <div class="form-text">Můžete přidat URL fotky, která bude zobrazena se zprávou</div>
                                <ValidationMessage For="@(() => updateForm.PhotoUrl)" class="text-danger small" />
                            </div>

                            <!-- Photo Preview -->
                            @if (!string.IsNullOrEmpty(updateForm.PhotoUrl))
                            {
                                <div class="mb-3">
                                    <label class="form-label">Náhled fotky</label>
                                    <div class="border rounded p-3">
                                        <img src="@updateForm.PhotoUrl" alt="Náhled" 
                                             class="img-fluid rounded" style="max-height: 200px;" />
                                    </div>
                                </div>
                            }

                            <!-- Preview -->
                            @if (!string.IsNullOrEmpty(updateForm.Title) && !string.IsNullOrEmpty(updateForm.Content))
                            {
                                <div class="mb-4">
                                    <label class="form-label">Náhled zprávy</label>
                                    <div class="border rounded p-3 bg-light">
                                        <div class="card">
                                            <div class="card-header">
                                                <h6 class="mb-0">@updateForm.Title</h6>
                                                <small class="text-muted">
                                                    @DateTime.Now.ToString("dd.MM.yyyy HH:mm") - @GetCampName(updateForm.CampId)
                                                </small>
                                            </div>
                                            <div class="card-body">
                                                <p class="mb-2">@updateForm.Content</p>
                                                @if (!string.IsNullOrEmpty(updateForm.PhotoUrl))
                                                {
                                                    <img src="@updateForm.PhotoUrl" alt="@updateForm.Title" 
                                                         class="img-fluid rounded mt-2" style="max-height: 200px;" />
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }

                            <div class="d-flex justify-content-end gap-2">
                                <a href="/admin/updates" class="btn btn-outline-secondary">
                                    <i class="fas fa-times me-2"></i>Zrušit
                                </a>
                                @if (isSaving)
                                {
                                    <button class="btn btn-primary" type="button" disabled>
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        Ukládám...
                                    </button>
                                }
                                else
                                {
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-save me-2"></i>
                                        @(Action == "create" ? "Vytvořit zprávu" : "Uložit změny")
                                    </button>
                                }
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- View Update Modal -->
    @if (selectedUpdate != null)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@selectedUpdate.Title</h5>
                        <button type="button" class="btn-close" @onclick="CloseViewModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <span class="badge bg-primary">@GetCampName(selectedUpdate.CampId)</span>
                                <small class="text-muted">@selectedUpdate.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <p class="mb-0">@selectedUpdate.Content</p>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(selectedUpdate.PhotoUrl))
                        {
                            <div class="text-center">
                                <img src="@selectedUpdate.PhotoUrl" alt="@selectedUpdate.Title" 
                                     class="img-fluid rounded" style="max-height: 400px;" />
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-primary" @onclick="() => EditUpdate(selectedUpdate.Id)">
                            <i class="fas fa-edit me-2"></i>Upravit
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseViewModal">Zavřít</button>
                    </div>
                </div>
            </div>
        </div>
    }
</CascadingValue>

@code {
    [Parameter] public string? Action { get; set; }
    [Parameter] public int? Id { get; set; }

    private List<Camp> camps = new();
    private List<LiveUpdate> allUpdates = new();
    private List<LiveUpdate> filteredUpdates = new();
    private LiveUpdate? selectedUpdate;
    
    private string selectedCampId = "";
    private string searchTerm = "";
    private bool isLoading = true;
    private bool isSaving = false;

    private UpdateFormModel updateForm = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        
        if (Action == "edit" && Id.HasValue)
        {
            await LoadUpdateForEdit(Id.Value);
        }
        else if (Action == "create")
        {
            updateForm = new UpdateFormModel();
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            camps = await CampService.GetAllCampsAsync();
            
            // Load all live updates from all camps
            allUpdates = camps.SelectMany(c => c.LiveUpdates ?? Enumerable.Empty<LiveUpdate>()).ToList();
            filteredUpdates = allUpdates.ToList();
            
            Logger.LogInformation("Loaded {CampCount} camps and {UpdateCount} updates", 
                camps.Count, allUpdates.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading live updates data");
            await JSRuntime.InvokeVoidAsync("showToast", "Chyba", "Nepodařilo se načíst data", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUpdateForEdit(int updateId)
    {
        try
        {
            var update = allUpdates.FirstOrDefault(u => u.Id == updateId);
            if (update != null)
            {
                updateForm = new UpdateFormModel
                {
                    Title = update.Title,
                    Content = update.Content,
                    CampId = update.CampId,
                    PhotoUrl = update.PhotoUrl ?? ""
                };
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Chyba", "Zpráva nebyla nalezena", "error");
                Navigation.NavigateTo("/admin/updates");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading update for edit");
            await JSRuntime.InvokeVoidAsync("showToast", "Chyba", "Nepodařilo se načíst zprávu", "error");
        }
    }

    private async Task FilterUpdates()
    {
        var filtered = allUpdates.AsEnumerable();

        // Filter by camp
        if (!string.IsNullOrEmpty(selectedCampId) && int.TryParse(selectedCampId, out int campId))
        {
            filtered = filtered.Where(u => u.CampId == campId);
        }

        // Filter by search term
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLower();
            filtered = filtered.Where(u =>
                u.Title.ToLower().Contains(term) ||
                u.Content.ToLower().Contains(term));
        }

        filteredUpdates = filtered.OrderByDescending(u => u.CreatedAt).ToList();
        await Task.CompletedTask;
    }

    private async Task SaveUpdate()
    {
        try
        {
            isSaving = true;
            
            // Create LiveUpdate object from form
            var update = new LiveUpdate
            {
                Title = updateForm.Title,
                Content = updateForm.Content,
                CampId = updateForm.CampId,
                PhotoUrl = string.IsNullOrWhiteSpace(updateForm.PhotoUrl) ? null : updateForm.PhotoUrl,
                CreatedAt = DateTime.Now
            };

            if (Action == "create")
            {
                // Add new update
                update.Id = allUpdates.Count > 0 ? allUpdates.Max(u => u.Id) + 1 : 1;
                allUpdates.Add(update);
                
                await JSRuntime.InvokeVoidAsync("showToast", "Úspěch", "Zpráva byla vytvořena", "success");
            }
            else if (Action == "edit" && Id.HasValue)
            {
                // Update existing
                var existingUpdate = allUpdates.FirstOrDefault(u => u.Id == Id.Value);
                if (existingUpdate != null)
                {
                    existingUpdate.Title = update.Title;
                    existingUpdate.Content = update.Content;
                    existingUpdate.CampId = update.CampId;
                    existingUpdate.PhotoUrl = update.PhotoUrl;
                }
                
                await JSRuntime.InvokeVoidAsync("showToast", "Úspěch", "Zpráva byla aktualizována", "success");
            }

            await FilterUpdates();
            Navigation.NavigateTo("/admin/updates");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving update");
            await JSRuntime.InvokeVoidAsync("showToast", "Chyba", "Nepodařilo se uložit zprávu", "error");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ViewUpdate(LiveUpdate update)
    {
        selectedUpdate = update;
    }

    private void CloseViewModal()
    {
        selectedUpdate = null;
    }

    private void EditUpdate(int updateId)
    {
        selectedUpdate = null; // Close view modal if open
        Navigation.NavigateTo($"/admin/updates/edit/{updateId}");
    }

    private async Task DeleteUpdate(LiveUpdate update)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Opravdu chcete smazat zprávu '{update.Title}'? Tato akce je nevratná.");
        
        if (confirmed)
        {
            try
            {
                allUpdates.Remove(update);
                await FilterUpdates();
                
                await JSRuntime.InvokeVoidAsync("showToast", "Úspěch", "Zpráva byla smazána", "success");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting update");
                await JSRuntime.InvokeVoidAsync("showToast", "Chyba", "Nepodařilo se smazat zprávu", "error");
            }
        }
    }

    private string GetCampName(int campId)
    {
        return camps.FirstOrDefault(c => c.Id == campId)?.Name ?? "Neznámý tábor";
    }

    public class UpdateFormModel
    {
        [Required(ErrorMessage = "Titulek je povinný")]
        [StringLength(200)]
        public string Title { get; set; } = "";

        [Required(ErrorMessage = "Obsah zprávy je povinný")]
        public string Content { get; set; } = "";

        [Required(ErrorMessage = "Vyberte tábor")]
        public int CampId { get; set; }

        [Url(ErrorMessage = "Neplatný formát URL")]
        public string PhotoUrl { get; set; } = "";
    }
}

<style>
    .modal.show {
        display: block !important;
    }
    
    .list-group-item {
        transition: background-color 0.2s ease;
    }
    
    .list-group-item:hover {
        background-color: rgba(0,0,0,0.02);
    }
</style>