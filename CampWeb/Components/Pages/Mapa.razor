@page "/mapa"
@inject IJSRuntime JSRuntime
@inject ICampService CampService

<PageTitle>Mapa táborů - Letní Tábory Plzeň</PageTitle>

<div class="container my-5">
    <h1 class="text-center mb-5">Mapa táborů v Plzni</h1>
    
    <!-- Filters -->
    <div class="camp-filter">
        <div class="row align-items-center">
            <div class="col-md-3">
                <label class="form-label">Typ tábora</label>
                <select class="form-select" @onchange="FilterByType">
                    <option value="">Všechny typy</option>
                    <option value="adventure">Dobrodružné</option>
                    <option value="sport">Sportovní</option>
                    <option value="creative">Kreativní</option>
                    <option value="science">Vědecké</option>
                    <option value="water">Vodácké</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Věková kategorie</label>
                <select class="form-select" @onchange="FilterByAge">
                    <option value="">Všechny věky</option>
                    <option value="6-9">6-9 let</option>
                    <option value="10-13">10-13 let</option>
                    <option value="14-17">14-17 let</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Cena do: <span class="fw-bold">@maxPrice Kč</span></label>
                <input type="range" class="form-range" min="3000" max="8000" 
                       value="@maxPrice" @oninput="UpdatePriceFilter" />
            </div>
            <div class="col-md-3">
                <label class="form-label">&nbsp;</label>
                <div>
                    <button class="btn btn-outline-primary" @onclick="ResetFilters">
                        <i class="fas fa-undo me-2"></i>Zrušit filtry
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Map Container -->
    <div id="map" style="height: 500px; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);"></div>

    <!-- Map Status -->
    <div class="text-center mt-2">
        <small class="text-muted">
            @if (isMapLoaded)
            {
                <i class="fas fa-check-circle text-success"></i> <span>Mapa načtena (@filteredCamps.Count táborů)</span>
            }
            else
            {
                <i class="fas fa-spinner fa-spin"></i> <span>Načítání mapy...</span>
            }
        </small>
    </div>

    <!-- Camp List -->
    <div class="row mt-5">
        <div class="col-12">
            <h3 class="mb-4">Dostupné tábory (@filteredCamps.Count)</h3>
        </div>
        @foreach (var camp in filteredCamps)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card camp-card">
                    <div class="camp-image">
                        <i class="@GetCampIcon(camp.Type)"></i>
                    </div>
                    <div class="card-body">
                        <span class="badge @GetAvailabilityBadge(camp.AvailableSpots) mb-2">
                            @GetAvailabilityText(camp.AvailableSpots)
                        </span>
                        <h5>@camp.Name</h5>
                        <p class="text-muted">
                            <i class="fas fa-map-marker-alt me-1"></i>@camp.Location
                        </p>
                        <p class="small">@camp.ShortDescription</p>
                        <p class="fw-bold text-primary">@camp.Price Kč / týden</p>
                        <div class="d-flex gap-2">
                            <a href="/tabor/@camp.Id" class="btn btn-primary btn-sm">Detail</a>
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => FocusOnMap(camp)">
                                <i class="fas fa-map-marker-alt"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .camp-filter {
        background: white;
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .camp-image {
        height: 150px;
        background: linear-gradient(45deg, #e3f2fd, #bbdefb);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2.5rem;
        color: #2c5aa0;
        border-radius: 15px 15px 0 0;
    }

    .camp-card {
        height: 100%;
        transition: transform 0.3s ease;
    }

    .camp-card:hover {
        transform: translateY(-5px);
    }

    .form-range::-webkit-slider-thumb {
        background: #2c5aa0;
    }

    .form-range::-moz-range-thumb {
        background: #2c5aa0;
        border: none;
    }
</style>

@code {
    private List<Camp> allCamps = new();
    private List<Camp> filteredCamps = new();
    private int maxPrice = 6000;
    private string selectedType = "";
    private string selectedAge = "";
    private bool isMapLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allCamps = await CampService.GetAllCampsAsync();
            filteredCamps = allCamps.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading camps: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && allCamps.Any())
        {
            try
            {
                // Wait a bit for Leaflet to load
                await Task.Delay(500);
                await JSRuntime.InvokeVoidAsync("initializeMap", allCamps);
                isMapLoaded = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing map: {ex.Message}");
            }
        }
    }

    private async Task FilterByType(ChangeEventArgs e)
    {
        selectedType = e.Value?.ToString() ?? "";
        await ApplyFilters();
    }

    private async Task FilterByAge(ChangeEventArgs e)
    {
        selectedAge = e.Value?.ToString() ?? "";
        await ApplyFilters();
    }

    private async Task UpdatePriceFilter(ChangeEventArgs e)
    {
        maxPrice = int.Parse(e.Value?.ToString() ?? "6000");
        await ApplyFilters();
    }

    private async Task ResetFilters()
    {
        selectedType = "";
        selectedAge = "";
        maxPrice = 6000;
        filteredCamps = allCamps.ToList();
        
        try
        {
            await JSRuntime.InvokeVoidAsync("updateMapMarkers", filteredCamps);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating map markers: {ex.Message}");
        }
        
        StateHasChanged();
    }

    private async Task ApplyFilters()
    {
        try
        {
            filteredCamps = await CampService.FilterCampsAsync(
                string.IsNullOrEmpty(selectedType) ? null : selectedType,
                string.IsNullOrEmpty(selectedAge) ? null : selectedAge,
                maxPrice
            );
            
            if (isMapLoaded)
            {
                await JSRuntime.InvokeVoidAsync("updateMapMarkers", filteredCamps);
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying filters: {ex.Message}");
        }
    }

    private async Task FocusOnMap(Camp camp)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("focusMapOnCamp", camp.Latitude, camp.Longitude);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error focusing on map: {ex.Message}");
        }
    }

    private static string GetCampIcon(string type)
    {
        return type switch
        {
            "adventure" => "fas fa-mountain",
            "sport" => "fas fa-volleyball-ball",
            "creative" => "fas fa-palette",
            "science" => "fas fa-microscope",
            "water" => "fas fa-swimmer",
            _ => "fas fa-campground"
        };
    }

    private static string GetAvailabilityBadge(int spots)
    {
        return spots switch
        {
            0 => "bg-danger",
            <= 5 => "bg-warning",
            _ => "bg-success"
        };
    }

    private static string GetAvailabilityText(int spots)
    {
        return spots switch
        {
            0 => "Obsazeno",
            <= 5 => "Poslední místa",
            _ => "Volná místa"
        };
    }
}