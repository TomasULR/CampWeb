@page "/tabory"
@using CampWeb.Models
@using CampWeb.Services
@inject ICampService CampService
@inject NavigationManager Navigation
@inject ILogger<Tabory> Logger
@rendermode InteractiveServer

<PageTitle>Naše tábory - Letní Tábory Plzeň</PageTitle>

<div class="container mt-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="text-center">
                <h1 class="display-5 fw-bold text-primary">Naše tábory</h1>
                <p class="lead text-muted">Vyberte si z naší nabídky kvalitních letních táborů pro děti všech věkových kategorií</p>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Typ tábora</label>
                            <select class="form-select" @bind="selectedType" @bind:after="ApplyFiltersAsync">
                                <option value="">Všechny typy</option>
                                <option value="adventure">Dobrodružný</option>
                                <option value="sport">Sportovní</option>
                                <option value="creative">Kreativní</option>
                                <option value="water">Vodácký</option>
                                <option value="science">Vědecký</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Věková kategorie</label>
                            <select class="form-select" @bind="selectedAgeGroup" @bind:after="ApplyFiltersAsync">
                                <option value="">Všechny věky</option>
                                <option value="6-9">6-9 let</option>
                                <option value="10-13">10-13 let</option>
                                <option value="14-17">14-17 let</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Maximální cena</label>
                            <select class="form-select" @bind="maxPrice" @bind:after="ApplyFiltersAsync">
                                <option value="">Bez omezení</option>
                                <option value="4000">Do 4 000 Kč</option>
                                <option value="5000">Do 5 000 Kč</option>
                                <option value="6000">Do 6 000 Kč</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Dostupnost</label>
                            <div class="form-check mt-2">
                                <input class="form-check-input" type="checkbox" @bind="onlyAvailable" @bind:after="ApplyFiltersAsync" id="availableOnly">
                                <label class="form-check-label" for="availableOnly">
                                    Pouze s volnými místy
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Summary -->
    <div class="row mb-3">
        <div class="col-12">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary me-2" role="status">
                        <span class="visually-hidden">Načítání...</span>
                    </div>
                    <span>Načítání táborů...</span>
                </div>
            }
            else
            {
                <p class="text-muted">
                    Zobrazeno <strong>@filteredCamps.Count</strong> táborů z celkem <strong>@allCamps.Count</strong>
                </p>
            }
        </div>
    </div>

    <!-- Camps Grid -->
    <div class="row">
        @if (isLoading)
        {
            <!-- Loading skeleton -->
            @for (int i = 0; i < 3; i++)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <div class="placeholder-glow">
                                <span class="placeholder col-8"></span>
                                <span class="placeholder col-6"></span>
                                <span class="placeholder col-12"></span>
                                <span class="placeholder col-4"></span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else if (hasError)
        {
            <div class="col-12">
                <div class="alert alert-danger">
                    <h5><i class="fas fa-exclamation-triangle me-2"></i>Chyba při načítání</h5>
                    <p>Nepodařilo se načíst seznam táborů. Zkuste to prosím znovu.</p>
                    <button class="btn btn-outline-danger" @onclick="LoadCampsDataAsync">
                        <i class="fas fa-redo me-2"></i>Zkusit znovu
                    </button>
                </div>
            </div>
        }
        else if (!filteredCamps.Any())
        {
            <div class="col-12">
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="fas fa-search fa-3x text-muted"></i>
                    </div>
                    <h4 class="text-muted">Nenalezeny žádné tábory</h4>
                    <p class="text-muted">Zkuste změnit filtry nebo se vraťte později</p>
                    <button class="btn btn-primary" @onclick="ClearFiltersAsync">
                        <i class="fas fa-times me-2"></i>Vymazat filtry
                    </button>
                </div>
            </div>
        }
        else
        {
            @foreach (var camp in filteredCamps)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card h-100 shadow-sm border-0 camp-card" @onclick="() => NavigateToCamp(camp.Id)">
                        <div class="card-header bg-white border-bottom-0 pt-3">
                            <div class="d-flex justify-content-between align-items-start">
                                <span class="badge bg-primary">@GetCampTypeDisplay(camp.Type)</span>
                                @if (camp.AvailableSpots <= 3 && camp.AvailableSpots > 0)
                                {
                                    <span class="badge bg-warning text-dark">
                                        <i class="fas fa-exclamation-triangle me-1"></i>Málo míst
                                    </span>
                                }
                                else if (camp.AvailableSpots == 0)
                                {
                                    <span class="badge bg-danger">Obsazeno</span>
                                }
                            </div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-dark">@camp.Name</h5>
                            <div class="camp-details mb-3">
                                <p class="text-muted small mb-2">
                                    <i class="fas fa-map-marker-alt text-danger me-2"></i>@camp.Location
                                </p>
                                <p class="text-muted small mb-2">
                                    <i class="fas fa-users text-info me-2"></i>@camp.AgeGroup let
                                </p>
                                <p class="text-muted small mb-2">
                                    <i class="fas fa-calendar text-success me-2"></i>@camp.StartDate.ToString("dd.MM") - @camp.EndDate.ToString("dd.MM.yyyy")
                                </p>
                                <p class="text-muted small">
                                    <i class="fas fa-chair text-warning me-2"></i>
                                    @if (camp.AvailableSpots > 0)
                                    {
                                        <span class="text-success">@camp.AvailableSpots volných míst</span>
                                    }
                                    else
                                    {
                                        <span class="text-danger">Obsazeno</span>
                                    }
                                </p>
                            </div>
                            <p class="card-text text-muted">@camp.ShortDescription</p>
                            
                            @if (camp.Activities?.Any() == true)
                            {
                                <div class="activities mb-3">
                                    @foreach (var activity in camp.Activities.Take(3))
                                    {
                                        <span class="badge bg-light text-dark me-1 mb-1">@activity</span>
                                    }
                                    @if (camp.Activities.Count > 3)
                                    {
                                        <span class="badge bg-light text-muted">+@(camp.Activities.Count - 3) dalších</span>
                                    }
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-white border-top-0">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="h5 mb-0 text-success">@camp.Price.ToString("N0") Kč</span>
                                @if (camp.AvailableSpots > 0)
                                {
                                    <button class="btn btn-primary" @onclick:stopPropagation="true" @onclick="() => NavigateToRegistration(camp.Id)">
                                        <i class="fas fa-user-plus me-2"></i>Registrovat
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-secondary" disabled>
                                        <i class="fas fa-times me-2"></i>Obsazeno
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<style>
    .camp-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        cursor: pointer;
    }
    .camp-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
    }
    .activities .badge {
        font-size: 0.75em;
    }
</style>

@code {
    private List<Camp> allCamps = new();
    private List<Camp> filteredCamps = new();
    private bool isLoading = true;
    private bool hasError = false;

    // Filter parameters
    private string selectedType = "";
    private string selectedAgeGroup = "";
    private string maxPrice = "";
    private bool onlyAvailable = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCampsDataAsync();
    }

    private async Task LoadCampsDataAsync()
    {
        isLoading = true;
        hasError = false;

        try
        {
            Logger.LogInformation("Loading camps from database...");
            
            // Load all camps from the database via service
            allCamps = await CampService.GetAllCampsAsync();
            filteredCamps = allCamps.ToList();
            
            Logger.LogInformation("Loaded {Count} camps from database", allCamps.Count);
            
            // Apply any existing filters
            await ApplyFiltersAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading camps from database");
            hasError = true;
            allCamps = new List<Camp>();
            filteredCamps = new List<Camp>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFiltersAsync()
    {
        try
        {
            // Convert maxPrice string to nullable int
            int? maxPriceValue = string.IsNullOrEmpty(maxPrice) ? null : int.Parse(maxPrice);

            // Use the service's filtering method
            var filtered = await CampService.FilterCampsAsync(
                type: string.IsNullOrEmpty(selectedType) ? null : selectedType,
                ageGroup: string.IsNullOrEmpty(selectedAgeGroup) ? null : selectedAgeGroup,
                maxPrice: maxPriceValue
            );

            // Apply additional client-side filtering for availability
            if (onlyAvailable)
            {
                filtered = filtered.Where(c => c.AvailableSpots > 0).ToList();
            }

            filteredCamps = filtered.ToList();
            
            Logger.LogInformation("Applied filters, showing {Count} camps", filteredCamps.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error applying filters");
            filteredCamps = allCamps.ToList();
        }
    }

    private async Task ClearFiltersAsync()
    {
        selectedType = "";
        selectedAgeGroup = "";
        maxPrice = "";
        onlyAvailable = false;
        filteredCamps = allCamps.ToList();
        
        Logger.LogInformation("Filters cleared");
        await Task.CompletedTask;
    }

    private void NavigateToCamp(int campId)
    {
        Navigation.NavigateTo($"/tabor/{campId}");
    }

    private void NavigateToRegistration(int campId)
    {
        Navigation.NavigateTo($"/registrace/{campId}");
    }

    private static string GetCampTypeDisplay(string type)
    {
        return type switch
        {
            "adventure" => "Dobrodružný",
            "sport" => "Sportovní",
            "creative" => "Kreativní",
            "water" => "Vodácký",
            "science" => "Vědecký",
            _ => "Ostatní"
        };
    }
}