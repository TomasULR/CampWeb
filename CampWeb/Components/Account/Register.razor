@page "/registrace"
@page "/register"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using CampWeb.Models
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject ILogger<Register> Logger
@rendermode InteractiveServer

<PageTitle>Registrace - Letní Tábory Plzeň</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h2>Vytvořte si účet</h2>
            </div>
            <div class="card-body">
                <p class="text-muted mb-4">
                    Vytvořte si účet pro snadnou správu registrací a přístup k informacím o táborech.
                </p>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }

                @if (registrationSuccess)
                {
                    <div class="alert alert-success">
                        <h4 class="alert-heading">
                            <i class="fas fa-check-circle me-2"></i>
                            Registrace úspěšná!
                        </h4>
                        <p>
                            Váš účet byl úspěšně vytvořen. Nyní se můžete přihlásit a registrovat se na tábory.
                        </p>
                        <hr>
                        <div class="d-flex gap-2">
                            <a href="/prihlaseni" class="btn btn-success">
                                <i class="fas fa-sign-in-alt me-2"></i>
                                Přihlásit se
                            </a>
                            <a href="/" class="btn btn-outline-primary">
                                <i class="fas fa-home me-2"></i>
                                Hlavní stránka
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
                        <DataAnnotationsValidator />

                        <div class="form-group mb-3">
                            <label for="firstname" class="form-label">Křestní jméno</label>
                            <InputText @bind-Value="Input.FirstName" class="form-control" id="firstname" autocomplete="given-name" />
                            <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="lastname" class="form-label">Příjmení</label>
                            <InputText @bind-Value="Input.LastName" class="form-control" id="lastname" autocomplete="family-name" />
                            <ValidationMessage For="() => Input.LastName" class="text-danger" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="email" class="form-label">E-mail</label>
                            <InputText @bind-Value="Input.Email" class="form-control" id="email" type="email" autocomplete="email" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="phone" class="form-label">Telefon</label>
                            <InputText @bind-Value="Input.PhoneNumber" class="form-control" id="phone" type="tel" autocomplete="tel" />
                            <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password" class="form-label">Heslo</label>
                            <InputText @bind-Value="Input.Password" class="form-control" id="password" type="password" autocomplete="new-password" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="confirmpassword" class="form-label">Potvrzení hesla</label>
                            <InputText @bind-Value="Input.ConfirmPassword" class="form-control" id="confirmpassword" type="password" autocomplete="new-password" />
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            Vytvořit účet
                        </button>
                    </EditForm>
                }

                @if (!registrationSuccess)
                {
                    <hr class="my-4" />
                    <p class="text-center">
                        Už máte účet? <a href="/prihlaseni">Přihlaste se zde</a>
                    </p>
                }
            </div>
        </div>

        @if (!registrationSuccess)
        {
            <div class="mt-4">
                <div class="card">
                    <div class="card-body">
                        <h5>Výhody registrace:</h5>
                        <ul class="list-unstyled">
                            <li>✓ Při příští registraci na tábor nemusíte vyplňovat základní údaje</li>
                            <li>✓ Dostanete e-mail o nových táborech a aktuálních nabídkách</li>
                            <li>✓ Přehled všech vašich registrací na jednom místě</li>
                            <li>✓ Snadný přístup k fotkám ze všech táborů vašich dětí</li>
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private bool isLoading = false;
    private bool registrationSuccess = false;
    private string? errorMessage;

    private async Task RegisterUser()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var user = new ApplicationUser
            {
                UserName = Input.Email,
                Email = Input.Email,
                FirstName = Input.FirstName,
                LastName = Input.LastName,
                PhoneNumber = Input.PhoneNumber,
                EmailConfirmed = true, // V produkci implementujte email confirmation
                CreatedAt = DateTime.UtcNow
            };

            var result = await UserManager.CreateAsync(user, Input.Password);

            if (result.Succeeded)
            {
                // Add to Parent role
                await UserManager.AddToRoleAsync(user, "Parent");
                
                Logger.LogInformation("User account created successfully: {Email}", Input.Email);
                
                // ODSTRANĚNO AUTOMATICKÉ PŘIHLÁŠENÍ - způsobovalo chybu
                // await SignInManager.SignInAsync(user, isPersistent: false);
                
                // Show success message instead
                registrationSuccess = true;
                StateHasChanged();
                return;
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during registration");
            errorMessage = "Došlo k chybě při registraci. Zkuste to znovu.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public sealed class InputModel
    {
        [Required(ErrorMessage = "Křestní jméno je povinné")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Příjmení je povinné")]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "E-mail je povinný")]
        [EmailAddress(ErrorMessage = "Neplatný formát e-mailu")]
        public string Email { get; set; } = "";

        [Phone(ErrorMessage = "Neplatný formát telefonu")]
        public string? PhoneNumber { get; set; }

        [Required(ErrorMessage = "Heslo je povinné")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Heslo musí mít alespoň 6 znaků")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Potvrzení hesla je povinné")]
        [Compare("Password", ErrorMessage = "Hesla se neshodují")]
        public string ConfirmPassword { get; set; } = "";
    }
}
